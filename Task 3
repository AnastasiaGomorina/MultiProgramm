#define HAVE_STRUCT_TIMESPEC
#include <iostream>
#include <pthread.h>
#include <string>

// Структура для передачи параметров в функцию потока
struct ThreadParams {
    std::string message;
};

// Мьютекс для синхронизации доступа к стандартному выводу
pthread_mutex_t print_mutex;

// Функция, которую будет выполнять созданный поток
void* print_thread(void* arg) {
    // Преобразуем указатель обратно в указатель на структуру ThreadParams
    ThreadParams* params = static_cast<ThreadParams*>(arg);

    for (int i = 0; i < 10; ++i) {
        // Захват мьютекса перед выводом
        pthread_mutex_lock(&print_mutex);
        std::cout << params->message << " " << i + 1 << std::endl;
        // Освобождение мьютекса после вывода
        pthread_mutex_unlock(&print_mutex);
    }
    return nullptr;
}

int main() {
    setlocale(LC_ALL, "Ru");
    // Инициализация мьютекса
    pthread_mutex_init(&print_mutex, nullptr);

    // Массив идентификаторов потоков
    pthread_t threads[4];

    // Массив параметров для каждого потока
    ThreadParams params[4] = {
        {"Сообщение из потока 1"},
        {"Сообщение из потока 2"},
        {"Сообщение из потока 3"},
        {"Сообщение из потока 4"}
    };

    // Создание четырех потоков
    for (int i = 0; i < 4; ++i) {
        if (pthread_create(&threads[i], nullptr, print_thread, &params[i])) {
            std::cerr << "Ошибка при создании потока " << i + 1 << std::endl;
            return 1;
        }
    }

    // Ожидание завершения всех потоков
    for (int i = 0; i < 4; ++i) {
        if (pthread_join(threads[i], nullptr)) {
            std::cerr << "Ошибка при ожидании завершения потока " << i + 1 << std::endl;
            return 1;
        }
    }

    // Уничтожение мьютекса
    pthread_mutex_destroy(&print_mutex);

    return 0;
}
