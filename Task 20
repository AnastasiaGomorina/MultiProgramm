#include <iostream>
#include <list>
#include <string> 
#include <thread>
#include <shared_mutex>
#include <chrono>     
#include <memory>    

// Структура для хранения строки и блокировки чтения-записи
struct ListNode {
    std::string data; // Данные строки
    mutable std::shared_mutex rwMutex; // Блокировка чтения-записи для синхронизации доступа к строке

    // Конструктор инициализирует строку
    ListNode(const std::string& str) : data(str) {}
};

// Связанный список строк
std::list<std::shared_ptr<ListNode>> listStrings;

// Блокировка чтения-записи для синхронизации доступа к самому списку
std::shared_mutex listMtx;

// Функция для пузырьковой сортировки списка
void bubbleSort(std::list<std::shared_ptr<ListNode>>& lst) {
    bool swapped; // Флаг для отслеживания обменов
    do {
        swapped = false; // Сбрасываем флаг перед каждой итерацией
        auto it = lst.begin(); // Итератор для перебора списка
        while (it != lst.end()) {
            auto current = it;           // Текущая запись
            auto next = std::next(it);   // Следующая запись

            if (next == lst.end()) break; // Если следующая запись отсутствует, выходим из цикла

            // Захватываем блокировки чтения-записи в порядке следования
            std::unique_lock<std::shared_mutex> lock1((*current)->rwMutex, std::defer_lock); // Блокируем текущую запись
            std::unique_lock<std::shared_mutex> lock2((*next)->rwMutex, std::defer_lock);    // Блокируем следующую запись

            // Захватываем блокировки атомарно, избегая взаимных блокировок
            std::lock(lock1, lock2);

            // Сравниваем и меняем местами, если необходимо
            if ((*current)->data > (*next)->data) {
                std::swap(*current, *next); // Меняем местами указатели
                swapped = true; // Устанавливаем флаг, указывающий, что произошел обмен
            }
            ++it; // Переходим к следующей записи
        }
    } while (swapped); // Продолжаем, пока происходят обмены
}

// Функция, выполняемая в дочернем потоке
void sorterThread() {
    while (true) {
        std::this_thread::sleep_for(std::chrono::seconds(5)); // Спим 5 секунд перед сортировкой
        std::unique_lock<std::shared_mutex> lg(listMtx); // Блокируем блокировку для синхронизации доступа к списку
        bubbleSort(listStrings); // Сортируем список
        std::cout << "Список отсортирован." << std::endl; // Выводим сообщение о завершении сортировки
    }
}

// Функция основного потока
void inputThread() {
    while (true) {
        std::string input;
        std::getline(std::cin, input); // Читаем ввод от пользователя

        if (input.empty()) { // Если введена пустая строка
            std::shared_lock<std::shared_mutex> lg(listMtx); // Блокируем блокировку для доступа к списку
            std::cout << "Состояние списка:" << std::endl;
            for (const auto& node : listStrings) { // Проходим по списку и выводим его содержимое
                std::shared_lock<std::shared_mutex> lock(node->rwMutex); // Блокируем блокировку записи перед выводом
                std::cout << node->data << std::endl; // Выводим данные записи
            }
            continue; // Продолжаем считывание ввода
        }

        // Если строка длиннее 80 символов, разбиваем ее на части
        while (input.length() > 80) {
            std::string part = input.substr(0, 80); // Отрезаем первые 80 символов
            input = input.substr(80);              // Оставляем оставшуюся часть строки
            std::shared_ptr<ListNode> newNode = std::make_shared<ListNode>(part); // Создаем новую запись
            std::unique_lock<std::shared_mutex> lg(listMtx); // Блокируем блокировку для доступа к списку
            listStrings.push_front(newNode); // Добавляем новую запись в начало списка
        }

        // Добавляем оставшуюся часть строки в начало списка
        std::shared_ptr<ListNode> newNode = std::make_shared<ListNode>(input);
        std::unique_lock<std::shared_mutex> lg(listMtx); // Блокируем блокировку для доступа к списку
        listStrings.push_front(newNode); // Добавляем новую запись в начало списка
    }
}

int main() {
    setlocale(LC_ALL, "Ru");
    std::thread sorter(sorterThread); // Создаем поток для сортировки списка   
    inputThread(); // Запускаем функцию ввода в основном потоке  
    sorter.join(); // Дожидаемся завершения сортирующего потока (теоретически, никогда не завершится)
    return 0;
}
